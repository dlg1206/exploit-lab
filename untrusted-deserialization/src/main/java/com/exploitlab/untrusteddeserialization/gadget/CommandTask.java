package com.exploitlab.untrusteddeserialization.gadget;

import java.io.IOException;
import java.io.Serializable;

/**
 * <b>File:</b> CommandTask.java
 * <p>
 * <b>Description:</b> "Gadget" Class with potentially tainted sink
 *
 * @author Derek Garcia
 */
public class CommandTask implements Runnable, Serializable {

    private final String command;

    /**
     * Create new Command task
     *
     * @param command Command to run
     */
    public CommandTask(String command) {
        this.command = command;
    }


    /**
     * When an object implementing interface {@code Runnable} is used
     * to create a thread, starting the thread causes the object's
     * {@code run} method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method {@code run} is that it may
     * take any action whatsoever.
     *
     * @see Thread#run()
     */
    @Override
    public void run() {
        try {
            Runtime.getRuntime().exec(this.command);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
