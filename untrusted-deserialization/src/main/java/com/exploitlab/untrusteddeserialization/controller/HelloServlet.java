package com.exploitlab.untrusteddeserialization.controller;


import com.exploitlab.untrusteddeserialization.model.User;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.Arrays;
import java.util.Base64;

/**
 * <b>File:</b> HelloServlet.java
 * <p>
 * <b>Description:</b> Demo Servlet with Deserialization Exploit
 *
 * @author Derek Garcia
 */
@WebServlet(name = "HelloServlet", urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    private final static Logger LOGGER = LoggerFactory.getLogger(HelloServlet.class);

    /**
     * Get a value from a cookie with a given name
     *
     * @param req  Request to get cookies from
     * @param name Name of cookie to search for
     * @return Cookie for that name, null if not found
     */
    private Cookie getCookieByName(HttpServletRequest req, String name) {
        return Arrays.stream(req.getCookies())
                .filter((c) -> c.getName().equals(name))
                .findAny()
                .orElse(null);
    }

    /**
     * Demo Endpoint that reads a user object from cookies and returns a hello message
     *
     * @param req  HTTP request
     * @param resp HTTP response
     * @throws IOException Failed to process cookies
     */
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        // Confirm cookies are present
        if (req.getCookies() == null) {
            LOGGER.warn("No Cookies Found");
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Provide a Cookie with 'user' and Base64 encoded user object");
            return;
        }

        // Confirm user cookie is present
        Cookie userCookie = getCookieByName(req, "user");
        if (userCookie == null) {
            LOGGER.warn("'user' was not found in Cookie'");
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Provide a Cookie with 'user' and Base64 encoded user object");
            return;
        }

        LOGGER.info("key 'user' found in cookie | Value: " + userCookie.getValue());

        try {
            // Start converting base64 string back into user object
            byte[] bytes = Base64.getDecoder().decode(userCookie.getValue());
            ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
            ObjectInput in = new ObjectInputStream(bis);

            // Attempt to convert into object
            LOGGER.info("Attempting to deserialize into User Object");
            User u = (User) in.readObject();        // EXPLOIT BEGINS HERE
            LOGGER.info("Successfully deserialized into User Object");

            // Create a little "Hello" html page using the user's name
            resp.setContentType("text/html");
            PrintWriter out = resp.getWriter();
            out.println("<html><head><title>Hello World!</title></head>");
            out.println("<body><h1>%s</h1></body></html>".formatted(u.getRandomGreeting()));

        } catch (IllegalArgumentException e) {
            LOGGER.error("'user' value was invalid base64 string | Error: " + e.getLocalizedMessage());
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to process User");
        } catch (ClassNotFoundException e) {
            /*
            This will occur during the exploit since attempting to deserialize the CacheManager into a
            User Object, however the malicious code will be executed before reaching here
             */
            LOGGER.error("Failed to deserialize into User Object | Error: " + e.getLocalizedMessage());
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to process User");
        } catch (Exception e) {
            LOGGER.error("Failed to process | Error: " + e.getLocalizedMessage());
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to process User");
        }
    }
}
