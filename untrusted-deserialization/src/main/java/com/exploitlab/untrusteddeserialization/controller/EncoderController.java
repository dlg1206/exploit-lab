package com.exploitlab.untrusteddeserialization.controller;

import com.exploitlab.untrusteddeserialization.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Base64;

/**
 * <b>File:</b> EncoderController.java
 * <p>
 * <b>Description:</b> Utility Base64 encoder for testing attack
 *
 * @author Derek Garcia
 */
@RestController
public class EncoderController {

    private final static Logger LOGGER = LoggerFactory.getLogger(EncoderController.class);

    /**
     * Return a Base64 encoded value of a given string value
     *
     * @param value Value to encode
     * @return Base64 encoded value
     */
    @GetMapping("/encode")
    public ResponseEntity<String> encodeValue(@RequestParam String value) {
        String encoding = Base64.getEncoder().encodeToString(value.getBytes());
        LOGGER.info("Encoded '%s' into '%s'".formatted(value, encoding));
        return new ResponseEntity<>(encoding, HttpStatus.OK);
    }


    /**
     * Create a new user and return the Base64 encoded version of it
     *
     * @param name Name of the user
     * @return Base64 Encoding of User Object
     * @throws IOException Any exception thrown by the underlying OutputStream.
     */
    @GetMapping("/encode-user")
    public ResponseEntity<String> encodeUser(@RequestParam String name) throws IOException {
        // Create new user and get bytes
        User user = new User(name);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {
            oos.writeObject(user);
        }

        String encoding = Base64.getEncoder().encodeToString(baos.toByteArray());
        LOGGER.info("Encoded new user '%s' into '%s'".formatted(name, encoding));
        // return encoding
        return new ResponseEntity<>(encoding, HttpStatus.OK);
    }
}
