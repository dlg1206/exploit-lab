"""
File: app.py
Description: Simple flask app for basic sql injection

@author Derek Garcia
"""
import os
import sys
from pathlib import Path

import mysql.connector
from dotenv import load_dotenv
from flask import Flask, request

DB_CONN = mysql.connector.connect()
app = Flask(__name__)


def est_database_connection() -> None:
    """
    Establish Database connection using environment variables
    """
    config = {
        'database': os.getenv("MYSQL_DATABASE"),
        'user': os.getenv("MYSQL_USER"),
        'password': os.getenv("MYSQL_PASSWORD"),
        'host': os.getenv("MYSQL_HOST"),
        'port': os.getenv("MYSQL_PORT")
    }
    global DB_CONN
    DB_CONN = mysql.connector.connect(**config)


@app.route('/products', methods=['GET'])
def get_products_by_category():
    """
    Endpoint: GET http://localhost:5000/products?category=[key-word]

    :param: category: category of products to search
    :return: all products in a category
    """
    try:
        category = request.args.get('category')

        if category is None:
            return "'category' parameter is missing", 400

        # Query Database
        with DB_CONN.cursor(dictionary=True) as cursor:
            q = f"SELECT name, description FROM products WHERE category='{category}'"  # INJECTION OCCURS HERE
            app.logger.info(q)
            cursor.execute(q)
            products = cursor.fetchall()

        if len(products) == 0:
            return f"No products in category '{category}'", 404

        return products, 200

    except Exception as e:
        app.logger.error(e)
        return "", 500


if __name__ == '__main__':

    try:
        # load env variables if provided
        if len(sys.argv) > 1:
            load_dotenv(dotenv_path=Path(sys.argv[1]))

        est_database_connection()
        assert DB_CONN is not None
        app.run(host='0.0.0.0')
        exit(0)
    except Exception as e:
        print(e)
        exit(1)
